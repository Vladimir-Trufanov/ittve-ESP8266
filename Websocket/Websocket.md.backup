## Websocket

### "пример вэбсокета на php"

### Общие рекомендации по запуску PHP-скриптов в командной строке Windows:

- Откройте командную строку. Для этого зажмите сочетание клавиш Win+R, введите «***cmd***» и нажмите ***Enter***. 

- Убедитесь, что PHP установлен в системе. Чтобы проверить наличие PHP и узнать установленную версию, введите ***php -v***. Если PHP не установлен, загрузите и установите его с официального сайта PHP. 

- Создайте PHP-скрипт, используя любой текстовый редактор. 

- Запустите скрипт. В командной строке пропишите команду ***php script.php***. 

- Также рекомендуется добавить путь до PHP в переменную окружения PATH в Windows. Это позволит не указывать каждый раз полный путь до файла php.exe. 

### [v4 WebSocket сервер на PHP:  10.10.2018](https://tokmakov.msk.ru/blog/item/202)

Протокол WebSocket предназначен для решения разных задач и снятия ограничений обмена данными между браузером и сервером. Он позволяет пересылать любые данные, на любой домен, безопасно и почти без лишнего сетевого трафика. Для установления соединения WebSocket клиент и сервер используют протокол, похожий на HTTP. Клиент формирует особый HTTP-запрос, на который сервер отвечает определенным образом.

***Простой сокет-сервер***

В первую очередь надо в файле php.ini расскомментировать строку, позволяющую работать с сокетами и перезапустить сервер:

```
extension = php_sockets.dll
```

Простой сокет-сервер представлен файлом ***SimpleServer.php***. Запуск из командной строки и ответы сервера выглядят след.образом: 

```
php.exe -f SimpleServer.php

SERVER START
Socket create...
Socket bind...
Set option...
Listening socket...
Waiting for connections...
```



#### [web-socket-server](https://github.com/tokmakov/web-socket-server)

#### [WebSocket](https://learn.javascript.ru/websockets)

#### [The WebSocket Protocol](https://datatracker.ietf.org/doc/html/rfc6455#section-7.4)

***Defined Status Codes***

- 1000 CLOSE_NORMAL. 1000 указывает на нормальное завершение работы, то есть на то, что цель, ради которой было установлено соединение, достигнута.

- 1001 CLOSE_GOING_AWAY. 1001 означает, что конечная точка «закрывается», например, сервер выходит из строя или браузер переходит на другую страницу.

- 1002 CLOSE_PROTOCOL_ERROR. 1002 указывает на то, что конечная точка завершает соединение из-за ошибки протокола.

- 1003 CLOSE_UNSUPPORTED. 1003 указывает на то, что конечная точка завершает соединение, поскольку получила тип данных, который она не может принять (например, конечная точка, которая понимает только текстовые данные, МОЖЕТ отправить этот код, если получит двоичное сообщение).

- 1004 Зарезервировано. Конкретное значение может быть определено в будущем.

- 1005 CLOSED_NO_STATUS. 1005 — это зарезервированное значение, которое НЕ ДОЛЖНО использоваться в качестве кода состояния в кадре управления закрытием конечной точкой. Оно предназначено для использования в приложениях, ожидающих код состояния, указывающий на отсутствие кода состояния.

- 1006 CLOSE_ABNORMAL. 1006 — это зарезервированное значение, которое НЕ ДОЛЖНО использоваться в качестве кода состояния в управляющем кадре закрытия конечной точкой. Оно предназначено для использования в приложениях, ожидающих код состояния, указывающий на то, что соединение было закрыто ненормально, например, без отправки или получения управляющего кадра закрытия:

```
a) клиент сокета в браузере работал не по протоколу сервера сокета;
б) истекло максимально заданное время работы сервера сокета.
```

- 1007 Unsupported payload. 1007 означает, что конечная точка завершает соединение, так как получила данные в сообщении, которые не соответствуют типу сообщения (например, данные, отличные от UTF-8 [RFC3629], в текстовом сообщении).

- 1008 Policy violation. 1008 указывает на то, что конечная точка завершает соединение, поскольку получила сообщение, нарушающее её политику. Это общий код состояния, который может быть возвращён, если нет другого более подходящего кода состояния (например, 1003 или 1009) или если необходимо скрыть конкретные сведения о политике.

- 1009 CLOSE_TOO_LARGE. 1009 означает, что конечная точка завершает соединение, так как получила слишком большое для обработки сообщение.

- 1010 Mandatory extension - Обязательное продление. 1010 указывает на то, что конечная точка (клиент) завершает соединение, так как ожидала, что сервер согласует одно или несколько расширений, но сервер не вернул их в ответном сообщении при установлении соединения WebSocket. Списокнеобходимых расширений ДОЛЖЕН отображаться в части /reason/ кадра закрытия. Обратите внимание, что этот код состояния не используется сервером, так как он может привести к сбою при установлении соединения WebSocket.

- 1011 Server error. 1011 означает, что сервер завершает соединение, так как столкнулся с непредвиденной ситуацией, которая помешала ему выполнить запрос.

- 1012 Service restart - Перезапуск службы. 1012 указывает, что сервер / служба перезапускается.

- 1013 Try again later - Попробуйте еще раз позже. 1013 указывает на то, что временное состояние сервера вынудило его заблокировать запрос клиента.

1014 Bad gateway - Плохие врата. 1014 означает, что сервер, выступающий в качестве шлюза, получил неверный ответ.

1015 TLS handshake fail - Сбой рукопожатия TLS. 1015 является зарезервированным значением и НЕ ДОЛЖЕН использоваться в качестве кода состояния в кадре управления закрытием конечной точкой. Он предназначен для использования в приложениях, ожидающих код состояния, указывающий на то, что соединение было закрыто из-за невозможности выполнить рукопожатие TLS (например, сертификат сервера не может быть проверен).

***Reserved Status Code Ranges***

- 0-999. Коды состояния в диапазоне 0-999 не используются.

- 1000-2999. Коды состояния в диапазоне 1000–2999 зарезервированы для определения в рамках этого протокола, его будущих версий и расширений, указанных в постоянной и общедоступной спецификации.

- 3000-3999. Коды состояния в диапазоне 3000-3999 зарезервированы для использования библиотеками, фреймворками и приложениями. Эти коды состояния зарегистрированы непосредственно в IANA. Интерпретация этих кодов не определена данным протоколом.

- 4000-4999. Коды состояния в диапазоне 4000-4999 зарезервированы для частного использования и, следовательно, не могут быть зарегистрированы. Такие коды могут использоваться по предварительным соглашениям между приложениями WebSocket. Толкование этих кодов настоящим протоколом не определено.









### Библиография

#### [v1 WebSocket сервер на PHP](https://github.com/maestroprog/websocket-server-php) 

#### [v2 Примеры из PHP](https://www.php.net/manual/ru/sockets.examples.php) 

#### [v3 Веб-сокеты в каждый дом](https://hharek.ru/веб-сокеты-в-каждый-дом)
